class Solution:
    def solveSudoku(self, mat):
        def is_safe(mat, row, col, num):
            for i in range(9):
                if mat[row][i] == num:
                    return False
            for i in range(9):
                if mat[i][col] == num:
                    return False
            start_row, start_col = 3 * (row // 3), 3 * (col // 3)
            for i in range(3):
                for j in range(3):
                    if mat[start_row + i][start_col + j] == num:
                        return False
            return True
        def find_empty(mat):
            for row in range(9):
                for col in range(9):
                    if mat[row][col] == 0:
                        return row, col
            return -1, -1 
        def backtrack(mat):
            row, col = find_empty(mat)
            if row == -1 and col == -1:
                return True
            for num in range(1, 10):
                if is_safe(mat, row, col, num):
                    mat[row][col] = num  
                    if backtrack(mat):
                        return True  
                    mat[row][col] = 0
            return False  
        backtrack(mat)
