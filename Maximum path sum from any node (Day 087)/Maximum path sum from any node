class Solution {
public:
    // Function to return maximum path sum from any node in a tree.
    int findMaxSum(Node* root) {
        // Variable to store the maximum path sum encountered so far
        int max_sum = INT_MIN;

        // Helper function to perform DFS and calculate the maximum path sum
        // Returns the maximum path sum starting from the current node
        std::function<int(Node*)> dfs = [&](Node* node) -> int {
            // Base case: if the node is NULL, return 0 (no path)
            if (!node) return 0;

            // Recurse to the left and right children, only considering positive sums
            int left_sum = std::max(dfs(node->left), 0);  // If negative, discard
            int right_sum = std::max(dfs(node->right), 0);  // If negative, discard

            // Calculate the maximum path sum passing through this node
            int current_sum = node->data + left_sum + right_sum;

            // Update the global max_sum if the current_sum is larger
            max_sum = std::max(max_sum, current_sum);

            // Return the maximum path sum that can be extended to the parent node
            return node->data + std::max(left_sum, right_sum);
        };

        // Start DFS from the root node
        dfs(root);

        // Return the maximum path sum found
        return max_sum;
    }
};
